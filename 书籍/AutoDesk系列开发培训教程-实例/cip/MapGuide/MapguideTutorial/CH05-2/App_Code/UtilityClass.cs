using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using OSGeo.MapGuide;
using System.Collections;
using System.Text;
using System.Xml;
using System.IO;
//---------------------------------------------------------------------------------------
//
//        功能：工具类，完成站点的连接，封装功能函数
//
//         作者： 
//
//         日期： 2007.5.23
//          
//         修改历史：无 
//          
//--------------------------------------------------------------------------------------- 
public class UtilityClass
{
    MgSiteConnection siteConnection;
    string selectionResult;
    string selectString;
    string webAppRootPath;

    public string SelectString
    {
        get { return selectString; }
        set { selectString = value; }
    }

    public string SelectionResult
    {
        get { return selectionResult; }
        set { selectionResult = value; }
    }

    public string WebAppRootPath
    {
        get { return webAppRootPath; }
        set { webAppRootPath = value; }
    }

    public void InitializeWebTier(HttpRequest Request)
    {
        string realPath = Request.ServerVariables["APPL_PHYSICAL_PATH"];
        String configPath = realPath + "webconfig.ini";
        MapGuideApi.MgInitializeWebTier(configPath);
    }

    public void ConnectToServer(String sessionID)
    {
        MgUserInformation userInfo = new MgUserInformation(sessionID);
        siteConnection = new MgSiteConnection();
        siteConnection.Open(userInfo);
    }

    public void ConnectToServer()
    {
        MgUserInformation userInfo = new MgUserInformation("Anonymous", "");
        siteConnection = new MgSiteConnection();
        siteConnection.Open(userInfo);
    }

    public ParcelProperty GetFirstSelectedFeature()
    {
        MgResourceService resService = (MgResourceService)siteConnection.CreateService(MgServiceType.ResourceService);
        MgFeatureService featService = (MgFeatureService)siteConnection.CreateService(MgServiceType.FeatureService);

        MgMap map = new MgMap();
        map.Open(resService, "Sheboygan");

        MgSelection mapSelection = new MgSelection(map);
        mapSelection.Open(resService, "Sheboygan");

        MgReadOnlyLayerCollection layers = mapSelection.GetLayers();
        if (layers == null)
            return null;

        ParcelProperty prop = new ParcelProperty();

        for (int i = 0; i < layers.GetCount(); i++)
        {
            MgLayer layer = layers.GetItem(i);
            if ((layer != null) && (layer.GetName() == "Parcels"))
            {
                String layerClassName = layer.GetFeatureClassName();
                String selectString = mapSelection.GenerateFilter(layer, layerClassName);

                String layerFeatureIdString = layer.GetFeatureSourceId();
                MgResourceIdentifier layerResId = new MgResourceIdentifier(layerFeatureIdString);

                MgFeatureQueryOptions queryOptions = new MgFeatureQueryOptions();
                queryOptions.SetFilter(selectString);
                MgFeatureReader featReader = featService.SelectFeatures(layerResId, layerClassName, queryOptions);

                if (featReader.ReadNext())
                {

                    prop.ID = featReader.GetInt32("Autogenerated_SDF_ID");
                    prop.Acreage = featReader.GetString("RACRE");
                    prop.BillingAddr = featReader.GetString("RBILAD");
                    prop.Description1 = featReader.GetString("RLDESCR1");
                    prop.Description2 = featReader.GetString("RLDESCR2");
                    prop.Description3 = featReader.GetString("RLDESCR3");
                    prop.Description4 = featReader.GetString("RLDESCR4");
                    prop.LotDimension = featReader.GetString("RLOT");
                    prop.LotSize = featReader.GetInt32("RSQFT");
                    prop.Owner = featReader.GetString("RNAME");
                    prop.Zoning = featReader.GetString("RTYPE");

		    featReader.Close();

                    return prop;
                }

		featReader.Close();
            }
        }

        return null;
    }
    //---------------------------------------------------------------------------------------
    //
    //        功能：更新要素对象
    //
    //         作者： 
    //
    //         日期： 2007.5.23
    //          
    //         修改历史：无 
    //          
    //--------------------------------------------------------------------------------------- 
    public bool UpdateFeature(ParcelProperty newFeatureValue)
    {
        MgResourceService resService = (MgResourceService)siteConnection.CreateService(MgServiceType.ResourceService);
        MgFeatureService featService = (MgFeatureService)siteConnection.CreateService(MgServiceType.FeatureService);

        MgFeatureQueryOptions query = new MgFeatureQueryOptions();
        string filterString = "Autogenerated_SDF_ID = " + newFeatureValue.ID;
        query.SetFilter(filterString);
        MgResourceIdentifier resId = new MgResourceIdentifier("Library://MgTutorial/Data/Parcels.FeatureSource");
        MgFeatureReader featureReader = featService.SelectFeatures(resId, "Parcels", query);

        if (featureReader.ReadNext())
        {
	        featureReader.Close();
	        MgPropertyCollection properties = buildPropertyCol(newFeatureValue);
        	
	        MgFeatureCommandCollection commands = new MgFeatureCommandCollection();
	        commands.Add(new MgUpdateFeatures("SHP_Schema:Parcels", properties, filterString));
	        featService.UpdateFeatures(resId, commands, false);
	        return true;
        }
	featureReader.Close();
	return false;
    }

    private MgPropertyCollection buildPropertyCol(ParcelProperty newFeatureValue)
    {
        MgPropertyCollection props = new MgPropertyCollection();

        props.Add(new MgStringProperty("RACRE", newFeatureValue.Acreage));
        props.Add(new MgStringProperty("RBILAD", newFeatureValue.BillingAddr));
        props.Add(new MgStringProperty("RLDESCR1", newFeatureValue.Description1));
        props.Add(new MgStringProperty("RLDESCR2", newFeatureValue.Description2));
        props.Add(new MgStringProperty("RLDESCR3", newFeatureValue.Description3));
        props.Add(new MgStringProperty("RLDESCR4", newFeatureValue.Description4));
        props.Add(new MgStringProperty("RLOT", newFeatureValue.LotDimension));
        props.Add(new MgInt32Property("RSQFT", newFeatureValue.LotSize));
        props.Add(new MgStringProperty("RNAME", newFeatureValue.Owner));
        props.Add(new MgStringProperty("RTYPE", newFeatureValue.Zoning));


        return props;
    }
    //---------------------------------------------------------------------------------------
    //
    //        功能：删除要素对象
    //
    //         作者： 
    //
    //         日期： 2007.5.23
    //          
    //         修改历史：无 
    //          
    //--------------------------------------------------------------------------------------- 
    public bool RemoveSelectedParcels(string selectString)
    {
        MgResourceService resService = (MgResourceService)siteConnection.CreateService(MgServiceType.ResourceService);
        MgFeatureService featService = (MgFeatureService)siteConnection.CreateService(MgServiceType.FeatureService);

        MgMap map = new MgMap();
        map.Open(resService, "Sheboygan");

        MgLayer layer = getLayerByName(map, "Parcels");
        MgFeatureCommandCollection commands = new MgFeatureCommandCollection();
        commands.Add(new MgDeleteFeatures("Parcels", selectString));
        MgResourceIdentifier resId = new MgResourceIdentifier(layer.GetFeatureSourceId());
        featService.UpdateFeatures(resId, commands, false);
	return true;
    }

    public MgLayer getLayerByName(MgMap map, String layerName)
    {
        MgLayer layer = null;
        for (int i = 0; i < map.GetLayers().GetCount(); i++)
        {
            MgLayer nextLayer = map.GetLayers().GetItem(i);
            if (nextLayer.GetName() == layerName)
            {
                layer = nextLayer;
                break;
            }
        }
        return layer;
    }
    //---------------------------------------------------------------------------------------
    //
    //        功能：列出当前选择的要素数据
    //
    //         作者： 
    //
    //         日期： 2007.5.23
    //          
    //         修改历史：无 
    //          
    //--------------------------------------------------------------------------------------- 
    public bool ListSelections()
    {
        MgResourceService resService = (MgResourceService)siteConnection.CreateService(MgServiceType.ResourceService);
        MgFeatureService featService = (MgFeatureService)siteConnection.CreateService(MgServiceType.FeatureService);

        MgMap map = new MgMap();
        map.Open(resService, "Sheboygan");

        MgSelection mapSelection = new MgSelection(map);
        mapSelection.Open(resService, "Sheboygan");

        if (mapSelection.GetLayers() != null)
        {
            OutputSelectionInHTML(mapSelection, featService);
            return true;
        }
        else
        {
            return false;
        }
    }
    //---------------------------------------------------------------------------------------
    //
    //        功能：输出查询结果
    //
    //         作者： 
    //
    //         日期： 2007.5.23
    //          
    //         修改历史：无 
    //          
    //--------------------------------------------------------------------------------------- 
    public void OutputSelectionInHTML(MgSelection selection, MgFeatureService featureService)
    {
        MgReadOnlyLayerCollection layers = selection.GetLayers();
        String outString = null;

        if (layers != null)
        {
            for (int i = 0; i < layers.GetCount(); i++)
            {
                MgLayer layer = layers.GetItem(i);
                if ((layer != null) && (layer.GetName() == "Parcels"))
                {
                    String layerClassName = layer.GetFeatureClassName();
                    selectString = selection.GenerateFilter(layer, layerClassName);

                    String layerFeatureIdString = layer.GetFeatureSourceId();
                    MgResourceIdentifier layerResId = new MgResourceIdentifier(layerFeatureIdString);

                    MgFeatureQueryOptions queryOptions = new MgFeatureQueryOptions();
                    queryOptions.SetFilter(selectString);
                    MgFeatureReader featReader = featureService.SelectFeatures(layerResId, layerClassName, queryOptions);

                    outString = outString + "<table border=\"1\">\n";

                    double acre = 0;

                    while (featReader.ReadNext())
                    {
                        outString = outString + "<tr>\n";

                        outString = outString + "<td>";
                        outString = outString + featReader.GetString("RNAME");
                        outString = outString + "</td>\n";
                        outString = outString + "<td>";
                        outString = outString + featReader.GetString("RPROPAD");
                        outString = outString + "</td>\n";
                        outString = outString + "<td>";
                        String acreString = featReader.GetString("RACRE");
                        acre = acre + (acreString == "" ? 0 : Convert.ToDouble(acreString));
                        outString = outString + acreString;
                        outString = outString + "</tr>\n";

                    }
                    outString = outString + "</table>\n";

		    featReader.Close();
                }
            }
        }
        selectionResult = outString;
    }

    //---------------------------------------------------------------------------------------
    //
    //        功能：根据传入的字符，创建MgPolygon对象
    //
    //         作者： 
    //
    //         日期： 2007.5.23
    //          
    //         修改历史：无 
    //          
    //--------------------------------------------------------------------------------------- 
    public MgPolygon parseString(string coordinates)
    {
        StringParser parser = new StringParser();
        return parser.parseString(coordinates);
    }
    //---------------------------------------------------------------------------------------
    //
    //        功能：创建要素对象
    //
    //         作者： 
    //
    //         日期： 2007.5.23
    //          
    //         修改历史：无 
    //          
    //--------------------------------------------------------------------------------------- 
    public void createNewParcel(MgPolygon geom, ParcelProperty newParcel)
    {
        MgPropertyCollection properties = buildPropertyCol(newParcel);
        MgAgfReaderWriter agfWriter = new MgAgfReaderWriter();
        MgByteReader byteReader = agfWriter.Write(geom);
        properties.Add(new MgGeometryProperty("SHPGEOM", byteReader));

        MgFeatureService featureService = (MgFeatureService)siteConnection.CreateService(MgServiceType.FeatureService);
        MgResourceIdentifier parcelSource = new MgResourceIdentifier("Library://MgTutorial/Data/Parcels.FeatureSource");

        MgFeatureCommandCollection commands = new MgFeatureCommandCollection();
        commands.Add(new MgInsertFeatures("Parcels", properties));
        featureService.UpdateFeatures(parcelSource, commands, false);

        //////////////////////////////////////////
        /*
        MgFeatureCommandCollection commands = new MgFeatureCommandCollection();
        MgPropertyCollection properties = new MgPropertyCollection();
        MgAgfReaderWriter agfReaderWriter = new MgAgfReaderWriter();
        MgByteReader   byteReader = agfReaderWriter.Write(geometry);
        MgGeometryProperty geometryProperty = new MgGeometryProperty("SHPGEOM",byteReader);
        properties.Add(new MgInt32Property("RSQFT", 322));
        properties.Add(new MgStringProperty("RNAME", "YourName"));
        properties.Add(new MgStringProperty("RTYPE", "GFC"));
       
        MgPropertyCollection properties = new MgPropertyCollection ();
        properties.Add(geometryProperty);
        MgInsertFeatures insertCommand = new MgInsertFeatures(className, properties);
        commands.Add(insertCommand);
        featureService.UpdateFeatures(featureSource, commands, false);
         * */
    }

    //---------------------------------------------------------------------------------------
    //
    //        功能：创建一个名为tempParcel的临时层
    //
    //         作者： 
    //
    //         日期： 2007.5.23
    //          
    //         修改历史：无 
    //          
    //--------------------------------------------------------------------------------------- 
    public void createTempParcels(MgPolygon geom, ParcelProperty newParcel, string sessionId)
    {
        MgFeatureService featureService = (MgFeatureService)siteConnection.CreateService(MgServiceType.FeatureService);
        MgResourceService resService = (MgResourceService)siteConnection.CreateService(MgServiceType.ResourceService);

       

        // 获取地图对象
        MgMap map = new MgMap();
        map.Open(resService, "Sheboygan");
        // 创建临时层
       MgResourceIdentifier tempLayerSourceId = new MgResourceIdentifier("Session:" + sessionId + "//tempParcel.FeatureSource");

        MgLayer tempParcelLayer = getLayerByName(map, "TempParcels");
        if (tempParcelLayer == null)
        {
            createTempParcelFeatureSource(featureService, tempLayerSourceId);
            tempParcelLayer = createTempParcelLayer(resService, tempLayerSourceId, sessionId);
            map.GetLayers().Insert(0, tempParcelLayer);
        }

        //向要素源中插入要素数据
        MgPropertyCollection props = populateParcelFeatureAttributes(geom, newParcel);
        MgFeatureCommandCollection commands = new MgFeatureCommandCollection();
        commands.Add(new MgInsertFeatures("tempParcel", props));
        featureService.UpdateFeatures(tempLayerSourceId, commands, false);

        tempParcelLayer.SetVisible(true);
        tempParcelLayer.ForceRefresh();
        map.Save(resService);
    }

    //---------------------------------------------------------------------------------------
    //
    //        功能：创建一个名为tempParcel的要素类
    //
    //         作者： 
    //
    //         日期： 2007.5.23
    //          
    //         修改历史：无 
    //          
    //--------------------------------------------------------------------------------------- 

    private void createTempParcelFeatureSource(MgFeatureService featureService, MgResourceIdentifier resId)
    {
        MgClassDefinition parcelClass = null;
        MgPropertyDefinitionCollection props = null;
        string ll84Wkt = "";

        //创建要素类
        ll84Wkt = "GEOGCS[\"LL84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.25722293287],TOWGS84[0,0,0,0,0,0,0]],PRIMEM[\"Greenwich\",0],UNIT[\"Degrees\",1]]";
        parcelClass = new MgClassDefinition();
        parcelClass.SetName("tempParcel");
        props = parcelClass.GetProperties();

        //定义要素类定义的标识属性
        MgDataPropertyDefinition id = new MgDataPropertyDefinition("ID");
        id.SetDataType(MgPropertyType.Int32);
        id.SetReadOnly(true);
        id.SetNullable(false);
        id.SetAutoGeneration(true);
        props.Add(id);

        MgPropertyDefinitionCollection idProps = parcelClass.GetIdentityProperties();
        idProps.Add(id);

        //定义要素类定义的几何属性
        MgGeometricPropertyDefinition geom = new MgGeometricPropertyDefinition("GEOM");
        geom.SetGeometryTypes(MgFeatureGeometricType.Surface);
        geom.SetHasElevation(false);
        geom.SetHasMeasure(false);
        geom.SetSpatialContextAssociation("LL84");
        props.Add(geom);
        parcelClass.SetDefaultGeometryPropertyName("GEOM");

        //定义要素类定义一般的属性
        MgDataPropertyDefinition acre = new MgDataPropertyDefinition("ACRE");
        acre.SetDataType(MgPropertyType.String);
        acre.SetLength(256);
        props.Add(acre);


        MgDataPropertyDefinition billingAddr = new MgDataPropertyDefinition("BILLADDR");
        billingAddr.SetDataType(MgPropertyType.String);
        billingAddr.SetLength(64);
        props.Add(billingAddr);

        MgDataPropertyDefinition desc1 = new MgDataPropertyDefinition("DESC1");
        desc1.SetDataType(MgPropertyType.String);
        desc1.SetLength(64);
        props.Add(desc1);

        MgDataPropertyDefinition desc2 = new MgDataPropertyDefinition("DESC2");
        desc2.SetDataType(MgPropertyType.String);
        desc2.SetLength(64);
        props.Add(desc2);

        MgDataPropertyDefinition desc3 = new MgDataPropertyDefinition("DESC3");
        desc3.SetDataType(MgPropertyType.String);
        desc3.SetLength(64);
        props.Add(desc3);

        MgDataPropertyDefinition desc4 = new MgDataPropertyDefinition("DESC4");
        desc4.SetDataType(MgPropertyType.String);
        desc4.SetLength(64);
        props.Add(desc4);

        MgDataPropertyDefinition lotDimension = new MgDataPropertyDefinition("LOTDIM");
        lotDimension.SetDataType(MgPropertyType.String);
        lotDimension.SetLength(32);
        props.Add(lotDimension);

        MgDataPropertyDefinition sqft = new MgDataPropertyDefinition("SQFT");
        sqft.SetDataType(MgPropertyType.Int32);
        props.Add(sqft);

        MgDataPropertyDefinition owner = new MgDataPropertyDefinition("OWNER");
        owner.SetDataType(MgPropertyType.String);
        owner.SetLength(64);
        props.Add(owner);

        MgDataPropertyDefinition zone = new MgDataPropertyDefinition("ZONE");
        zone.SetDataType(MgPropertyType.String);
        zone.SetLength(32);
        props.Add(zone);

        // 创建模式
        MgFeatureSchema schema = new MgFeatureSchema();
        schema.SetName("SchemaParcels");
        schema.GetClasses().Add(parcelClass);

        MgCreateSdfParams sdfParams = new MgCreateSdfParams("LL84", ll84Wkt, schema);
        featureService.CreateFeatureSource(resId, sdfParams);
        //
    }
    //---------------------------------------------------------------------------------------
    //
    //        功能：基于预定义的XML创建层
    //
    //         作者： 
    //
    //         日期： 2007.5.23
    //          
    //         修改历史：无 
    //          
    //--------------------------------------------------------------------------------------- 
    private MgLayer createTempParcelLayer(MgResourceService resService, MgResourceIdentifier resId, string sessionId)
    {
        MgLayer tempParcelLayer = null;

        // 读入XML文档
        XmlDocument doc = new XmlDocument();
        doc.PreserveWhitespace = false;
        doc.Load(@"C:\inetpub\wwwroot\MapguideTutorial\CH05-2\tempParcels.xml");
        // 将XML文档中的ResourceId项替换为传入的资源ID，此处应为所创建的会话仓储中的临时资源ID
        XmlNode featureSourceNode = doc.GetElementsByTagName("ResourceId").Item(0);
        XmlNode resContent = doc.CreateTextNode(resId.ToString());
        featureSourceNode.AppendChild(resContent);
        // 处理XML
        MemoryStream xmlStream = new MemoryStream();
        doc.Save(xmlStream);
        byte[] layerDef = xmlStream.ToArray();
        Encoding utf8 = Encoding.UTF8;
        string layerDefStr = new string(utf8.GetChars(layerDef));
        layerDef = new byte[layerDefStr.Length - 1];
        int byteCount = utf8.GetBytes(layerDefStr, 1, layerDefStr.Length - 1, layerDef, 0);

        MgByteSource byteSource = new MgByteSource(layerDef, layerDef.Length);
        byteSource.SetMimeType(MgMimeType.Xml);
        // 保存资源
        MgResourceIdentifier tempParcelLayerId = new MgResourceIdentifier("Session:" + sessionId + "//TempParcel.LayerDefinition");
        resService.SetResource(tempParcelLayerId, byteSource.GetReader(), null);
        //创建临时层
        tempParcelLayer = new MgLayer(tempParcelLayerId, resService);
        tempParcelLayer.SetName("TempParcels");
        tempParcelLayer.SetLegendLabel("New Parcels");
        tempParcelLayer.SetDisplayInLegend(true);
        tempParcelLayer.SetSelectable(false);

        return tempParcelLayer;
    }
    //---------------------------------------------------------------------------------------
    //
    //        功能：构造要素数据，类似于构造表记录
    //
    //         作者： 
    //
    //         日期： 2007.5.23
    //          
    //         修改历史：无 
    //          
    //--------------------------------------------------------------------------------------- 
    private MgPropertyCollection populateParcelFeatureAttributes(MgPolygon geom, ParcelProperty newParcel)
    {
        MgPropertyCollection props = new MgPropertyCollection();
        MgAgfReaderWriter agfWriter = new MgAgfReaderWriter();
        props.Add(new MgGeometryProperty("GEOM", agfWriter.Write(geom)));
        props.Add(new MgStringProperty("ACRE", newParcel.Acreage));
        props.Add(new MgStringProperty("BILLADDR", newParcel.BillingAddr));
        props.Add(new MgStringProperty("DESC1", newParcel.Description1));
        props.Add(new MgStringProperty("DESC2", newParcel.Description2));
        props.Add(new MgStringProperty("DESC3", newParcel.Description3));
        props.Add(new MgStringProperty("DESC4", newParcel.Description4));
        props.Add(new MgStringProperty("LOTDIM", newParcel.LotDimension));
        props.Add(new MgInt32Property("SQFT", newParcel.LotSize));
        props.Add(new MgStringProperty("OWNER", newParcel.Owner));
        props.Add(new MgStringProperty("ZONE", newParcel.Zoning));

        return props;

    }

}