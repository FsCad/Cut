using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using OSGeo.MapGuide;
using System.Text;
using System.Collections;

public class UtilityClass
{
    MgSiteConnection siteConnection;

  //----------------------------------------------------------------------------------------
    // 功 能： 初始化网络层
    //
    // 作 者： 
    //
    //
    // 日 期：2007.05.#
    //
    //-----------------------------------------------------------------------------------------
    public void InitializeWebTier(HttpRequest Request)
    {
        string realPath = Request.ServerVariables["APPL_PHYSICAL_PATH"];
        String configPath = realPath + "webconfig.ini";
        MapGuideApi.MgInitializeWebTier(configPath);
    }

   //----------------------------------------------------------------------------------------
    // 功 能： 初始化网络层
    //
    // 作 者： 
    //
    //
    // 日 期：2007.05.#
    //
    //-----------------------------------------------------------------------------------------
    public void InitializeWebTier(String path)
    {
        MapGuideApi.MgInitializeWebTier(path);
    }
  
    public void ConnectToServer(String sessionID)
    {
        MgUserInformation userInfo = new MgUserInformation(sessionID);
        siteConnection = new MgSiteConnection();
        siteConnection.Open(userInfo);
    }

    //----------------------------------------------------------------------------------------
    // 功 能： 链接站点服务器
    //
    // 作 者： 
    //
    //
    // 日 期：2007.05.#
    //
    //-----------------------------------------------------------------------------------------
    public void ConnectToServer(String userName, String password)
    {
        MgUserInformation userInfo = new MgUserInformation(userName, password);
        siteConnection = new MgSiteConnection();
        siteConnection.Open(userInfo);
    }
    //----------------------------------------------------------------------------------------
    // 功 能： 查询指定范围内的要素
    //
    // 作 者： 
    //
    //
    // 日 期：2007.05.#
    //
    //-----------------------------------------------------------------------------------------
    public ParcelProperty[] GetNearParcels(string parcelType, GeocodeAddress geocodeAddress, double bufferDistance)
    {
        ParcelProperty[] parcelProperties = null;

        //基于地址编码 几何点和点的缓存分析（多边形）
        MgGeometryFactory geoFactory = new MgGeometryFactory();
        MgCoordinate coord = geoFactory.CreateCoordinateXY(Convert.ToDouble(geocodeAddress.lon), Convert.ToDouble(geocodeAddress.lat));
        MgPoint pt = geoFactory.CreatePoint(coord);
        //查询在指定范围内（多边形）的要素
        MgPolygon buffer = (MgPolygon)pt.Buffer(bufferDistance, null);

        MgFeatureService featureService = (MgFeatureService)siteConnection.CreateService(MgServiceType.FeatureService);

        MgFeatureQueryOptions query = new MgFeatureQueryOptions();
        query.SetFilter("RTYPE LIKE '" + parcelType + "%'");
        query.SetSpatialFilter("SHPGEOM", buffer, MgFeatureSpatialOperations.Inside);
        MgResourceIdentifier resId = new MgResourceIdentifier("Library://Samples/Sheboygan/Data/Parcels.FeatureSource");
        MgFeatureReader featReader = featureService.SelectFeatures(resId, "Parcels", query);
        //处理查询结果
        ArrayList props = new ArrayList();
        while (featReader.ReadNext())
        {
            ParcelProperty prop = new ParcelProperty();
            prop.ID = featReader.GetInt32("Autogenerated_SDF_ID").ToString();
            prop.Acreage = featReader.GetString("RACRE");
            prop.BillingAddr = featReader.GetString("RBILAD");
            prop.Description1 = featReader.GetString("RLDESCR1");
            prop.Description2 = featReader.GetString("RLDESCR2");
            prop.Description3 = featReader.GetString("RLDESCR3");
            prop.Description4 = featReader.GetString("RLDESCR4");
            prop.LotDimension = featReader.GetString("RLOT");
            prop.LotSize = featReader.GetInt32("RSQFT");
            prop.Owner = featReader.GetString("RNAME");
            prop.Zoning = featReader.GetString("RTYPE");

            props.Add(prop);
        }

        parcelProperties = (ParcelProperty[])props.ToArray(typeof(ParcelProperty));
        return parcelProperties;

    }
}
